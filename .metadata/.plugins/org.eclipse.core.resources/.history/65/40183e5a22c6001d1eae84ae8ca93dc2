package file;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import functions.CurrentTime;


public class LogFile {
	private static int currentLogLength;  // 현재 로그파일 길이
	private static int previousLogLength;  // 이전 로그파일 길이
	private static int addedLogLength;  // 추가된 로그파일 길이
	
	private static String[] logFileArr = new String[0];  // 불러온 로그 파일을 배열에 저장한 것
	
	
	public static String[] addedLines() throws IOException {
		LogFile.checkLogFile();
		
		if (addedLogLength > 0) {
			String strArr[] = new String[addedLogLength];
			
			for (int i = 0; i < addedLogLength; i++) {
				strArr[i] = LogFile.logFileArr[LogFile.logFileArr.length - 1 - i];
			}
			return strArr;
		} else if (addedLogLength < 0) {
			return null;
		}
		return null;
	}
	
	
	public static void checkLogFile() throws IOException {  // 로그파일을 확인해서 이전 로그 파일 길이, 현재 로그파일 길이, 변경된 로그파일 길이를 저장한다.
		
		// 파일 위치, 이름
		String filePath = String.format("C:/spmEzCut/LogMessage/%s.log", CurrentTime.getTime("date"));
		
		try {
			ArrayList<String> fileReaded = new ArrayList<>();
	    	
			// 로그 파일 불러오기, 한줄씩 저장
	    	BufferedReader reader = new BufferedReader(new FileReader(filePath));
	    	String str;
	    	while ((str = reader.readLine()) != null) {
	    		fileReaded.add(str);
	    	}
	    	
	    	// 배열로 변환
	    	LogFile.logFileArr = new String[0];
	    	LogFile.logFileArr = fileReaded.toArray(LogFile.logFileArr);
	    	
	    	// 이전 로그 파일 길이에 현재 로그 파일 길이 저장
	    	LogFile.previousLogLength = LogFile.currentLogLength;
	    	
	    	// 현재 로그 파일 길이 저장
	    	LogFile.currentLogLength = LogFile.logFileArr.length;
	    	if (LogFile.logFileArr[0] == null) {
	    		LogFile.currentLogLength = 0;
	    	}
	    	
	    	// 추가된 로그 파일 길이 저장
	    	LogFile.addedLogLength = LogFile.currentLogLength - LogFile.previousLogLength;
	    	
	    	reader.close();
	    	
		} catch (FileNotFoundException fe) {  // 파일 없으면 파일 생성
			File file = new File(filePath);
			file.createNewFile();
		} catch (ArrayIndexOutOfBoundsException ae) { }
			
	}

}
